{"version":3,"sources":["Home.js","firebase.js","Input.js","Messenger.js","App.js","serviceWorker.js","index.js"],"names":["Home","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Input","handleChange","e","setState","userInput","target","value","handleSubmit","event","preventDefault","state","database","ref","push","document","getElementById","enterKey","key","click","className","onKeyPress","this","action","onSubmit","name","id","onChange","type","Messenger","autoScroll","scrollIntoView","behavior","messages","on","response","oldMsg","Object","values","val","map","message","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"mRAceA,E,uKAVX,OACE,kBAAC,WAAD,KACE,oE,GAJWC,a,sBCWjBC,IAASC,cAVW,CAClBC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,ECmCeS,E,kDA9Cb,aAAc,IAAD,8BACX,gBAMFC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,UAAWF,EAAEG,OAAOC,SATX,EAabC,aAAe,SAACC,IACdA,EAAMC,iBAEuB,KAAzB,EAAKC,MAAMN,aACEb,EAASoB,WAAWC,IAAI,YAEhCC,KAAK,EAAKH,MAAMN,WAEvBU,SAASC,eAAe,aAAaT,MAAQ,GAE7C,EAAKH,SAAS,CAACC,UAAU,OAvBhB,EA2BbY,SAAW,SAACd,GACI,UAAVA,EAAEe,MACJf,EAAEO,iBACFK,SAASC,eAAe,aAAaG,UA5BvC,EAAKR,MAAQ,CACXN,UAAU,IAHD,E,qDAmCX,OACE,yBAAKe,UAAU,WACb,0BAAMA,UAAU,OAAOC,WAAYC,KAAKL,SAAUM,OAAO,SAASC,SAAUF,KAAKd,cAC/E,8BAAUD,MAAOe,KAAKX,MAAMN,UAAWoB,KAAK,YAAYC,GAAG,YAAYC,SAAUL,KAAKpB,eACtF,4BAAQwB,GAAG,YAAYE,KAAK,UAA5B,c,GAxCUrC,aCqDLsC,E,kDAnDb,aAAe,IAAD,8BACZ,gBAOFC,WAAa,WACXf,SAASC,eAAe,eAAee,eAAe,CAACC,SAAU,YAPjE,EAAKrB,MAAQ,CACXsB,SAAU,IAHA,E,gEAYO,IAAD,OAElBX,KAAKQ,aAEStC,EAASoB,WAAWC,IAAI,YAIhCqB,GAAG,SAAS,SAACC,GAEjB,IAAMC,EAASC,OAAOC,OAAOH,EAASI,OAEtC,EAAKnC,SAAS,CACZ6B,SAAUG,S,2CAMdd,KAAKQ,e,+BAIL,OACE,6BAASV,UAAU,aACjB,yBAAKA,UAAU,WACb,wBAAIA,UAAU,UACXE,KAAKX,MAAMsB,SAASO,KAAI,SAACC,GACxB,OAAO,4BAAKA,OAGhB,yBAAKf,GAAG,iBAEV,kBAAC,EAAD,W,GA9CgBnC,aCaTmD,G,6KAVX,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MAEA,kBAAC,EAAD,W,GANUnD,cCOEoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnC,SAASC,eAAe,SDyHpB,kBAAmBmC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMjB,c","file":"static/js/main.05fdcfc1.chunk.js","sourcesContent":["import React, {Component, Fragment} from 'react';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <h1>\r\n          Welcome to my Discussion Board!\r\n        </h1>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home;","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig ={\r\n    apiKey: \"AIzaSyDV5XqywrHotaC0O6JHtRyHykwrc8f9LnQ\",\r\n    authDomain: \"messenger-app-70b70.firebaseapp.com\",\r\n    databaseURL: \"https://messenger-app-70b70.firebaseio.com\",\r\n    projectId: \"messenger-app-70b70\",\r\n    storageBucket: \"messenger-app-70b70.appspot.com\",\r\n    messagingSenderId: \"299547838511\",\r\n    appId: \"1:299547838511:web:cd1f22806d6dd200909eda\"\r\n  };\r\n\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, {Component} from 'react';\r\nimport firebase from './firebase';\r\n\r\nclass Input extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      userInput:'',\r\n    }\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      userInput: e.target.value\r\n    })\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (this.state.userInput !== '') {\r\n      const msgRef = firebase.database().ref('messages');\r\n  \r\n      msgRef.push(this.state.userInput);\r\n  \r\n      document.getElementById('userInput').value = '';\r\n  \r\n      this.setState({userInput:''})\r\n    }\r\n  }\r\n\r\n  enterKey = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      e.preventDefault();\r\n      document.getElementById('submitBtn').click();\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"sendMsg\">        \r\n        <form className=\"send\" onKeyPress={this.enterKey} action=\"submit\" onSubmit={this.handleSubmit}>\r\n          <textarea value={this.state.userInput} name=\"userInput\" id=\"userInput\" onChange={this.handleChange}></textarea>\r\n          <button id=\"submitBtn\" type=\"submit\">Send</button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default Input;","import React, {Component} from 'react';\r\nimport firebase from './firebase';\r\nimport Input from './Input';\r\n\r\nclass Messenger extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      messages: [],\r\n    }\r\n  }\r\n\r\n  \r\n  autoScroll = () => {\r\n    document.getElementById('scrollDummy').scrollIntoView({behavior: \"smooth\"});\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    this.autoScroll();\r\n\r\n    const dbRef = firebase.database().ref('messages');\r\n\r\n    // dbRef.push('Topic of the day')\r\n\r\n    dbRef.on('value', (response) => {\r\n\r\n      const oldMsg = Object.values(response.val())\r\n\r\n      this.setState({\r\n        messages: oldMsg,\r\n      })\r\n    })\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.autoScroll();\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <section className=\"messenger\">\r\n        <div className=\"showMsg\">\r\n          <ul className=\"oldMsg\" >\r\n            {this.state.messages.map((message) => {\r\n              return <li>{message}</li>\r\n            })}\r\n          </ul>\r\n          <div id=\"scrollDummy\"></div>\r\n        </div>\r\n        <Input />\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Messenger","import React, {Component, Fragment} from 'react';\nimport Home from './Home';\nimport Messenger from './Messenger'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Home />\n\n        <Messenger />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n\n\n// General Messenger App\n// 0. Home page displays topics to choose from (only one for MVP)\n//   0.1. Prechosen by coder: \"What is the meaning of life?\"\n//   *0.2. Generate new topic every 24 hours from a random API (setInterval, setState)\n// 1. All preexisting messages are rendered in the window from firebase (on render)\n// *2. User can input their display name (setState)\n//   *2.1. Saved as a const that will attach to their message \n// 3. Typed messages are saved in the firebase server (onSubmit) and rendered onto the screen\n// *4. User can generate topics themselves.\n// *5. Giphy/image functionality.\n// *6. Make it look pretty\n// *7 can remove messages (contextMenu)\n// *8. Add authentication for users so they may only edit their own messages\n\n// *Stretch goals","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}